<?php
/**
 * SyncApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace StevenBuehner\ChurchTools\Test\Api;

use \StevenBuehner\ChurchTools\Configuration;
use \StevenBuehner\ChurchTools\ApiException;
use \StevenBuehner\ChurchTools\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SyncApiTest Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SyncApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createSyncMapping
     *
     * Create new mapping.
     *
     */
    public function testCreateSyncMapping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteEntityMapping
     *
     * Delete Mapping from Database..
     *
     */
    public function testDeleteEntityMapping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteSyncConflict
     *
     * Delete Conflict.
     *
     */
    public function testDeleteSyncConflict()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter
     *
     * Delete all filter entities.
     *
     */
    public function testDeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties
     *
     * Delete all Properties for This Job.
     *
     */
    public function testDeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getEntityMapping
     *
     * Get One Entity Mapping.
     *
     */
    public function testGetEntityMapping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSyncConflict
     *
     * Fetch One Conflict.
     *
     */
    public function testGetSyncConflict()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSyncConflicts
     *
     * Fetch all conflicts.
     *
     */
    public function testGetSyncConflicts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSyncExecutions
     *
     * Statistical Information about Sync Executions.
     *
     */
    public function testGetSyncExecutions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter
     *
     * Fetch all entity filters for this job.
     *
     */
    public function testGetSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties
     *
     * Fetch all Properties for This Job.
     *
     */
    public function testGetSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSyncFieldMappings
     *
     * Get Mapping for Domain Type.
     *
     */
    public function testGetSyncFieldMappings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSyncLogs
     *
     * Get Sync Logs.
     *
     */
    public function testGetSyncLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSyncMappings
     *
     * Fetch all registered mappings.
     *
     */
    public function testGetSyncMappings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postSyncExternalsystems
     *
     * Create external system.
     *
     */
    public function testPostSyncExternalsystems()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postSyncExternalsystemsExternalSystemIdJobconfigsJobIdStart
     *
     * Start Execution.
     *
     */
    public function testPostSyncExternalsystemsExternalSystemIdJobconfigsJobIdStart()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postSyncLogs
     *
     * Save Sync Logs.
     *
     */
    public function testPostSyncLogs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter
     *
     * Save entity filters.
     *
     */
    public function testPutSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties
     *
     * Save Properties, Which Should Be Synced.
     *
     */
    public function testPutSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putSyncFieldMappings
     *
     * Save Mapping for Domain Type.
     *
     */
    public function testPutSyncFieldMappings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for saveSyncConflict
     *
     * Save new detected conflict.
     *
     */
    public function testSaveSyncConflict()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateEntityMapping
     *
     * Update or Create Mapping.
     *
     */
    public function testUpdateEntityMapping()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateSyncConflict
     *
     * Update Conflict.
     *
     */
    public function testUpdateSyncConflict()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
