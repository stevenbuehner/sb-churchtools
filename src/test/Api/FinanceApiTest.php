<?php
/**
 * FinanceApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace StevenBuehner\ChurchTools\Test\Api;

use \StevenBuehner\ChurchTools\Configuration;
use \StevenBuehner\ChurchTools\ApiException;
use \StevenBuehner\ChurchTools\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * FinanceApiTest Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FinanceApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for applyFinanceTemplate
     *
     * Apply finance template.
     *
     */
    public function testApplyFinanceTemplate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for batchTransaction
     *
     * Transaction Batch Processing.
     *
     */
    public function testBatchTransaction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createCashDiscount
     *
     * Create new cash discout.
     *
     */
    public function testCreateCashDiscount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createCostCenter
     *
     * Create new cost center.
     *
     */
    public function testCreateCostCenter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewAccount
     *
     * Create new account.
     *
     */
    public function testCreateNewAccount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewAccountClass
     *
     * Create new account class.
     *
     */
    public function testCreateNewAccountClass()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewAccountGroup
     *
     * Create new account group.
     *
     */
    public function testCreateNewAccountGroup()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewAccountType
     *
     * Create new account type.
     *
     */
    public function testCreateNewAccountType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewAccountingPeriod
     *
     * Create new accounting period.
     *
     */
    public function testCreateNewAccountingPeriod()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewClient
     *
     * Create new client.
     *
     */
    public function testCreateNewClient()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewTransaction
     *
     * Create new transaction.
     *
     */
    public function testCreateNewTransaction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createNewTransactionPurpose
     *
     * Create new transaction purpose.
     *
     */
    public function testCreateNewTransactionPurpose()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createTaxRate
     *
     * Create new tax rate.
     *
     */
    public function testCreateTaxRate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createTaxType
     *
     * Create new tax type.
     *
     */
    public function testCreateTaxType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAccount
     *
     * Delete account.
     *
     */
    public function testDeleteAccount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAccountClass
     *
     * Delete account class.
     *
     */
    public function testDeleteAccountClass()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAccountGroup
     *
     * Delete account group.
     *
     */
    public function testDeleteAccountGroup()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAccountType
     *
     * Delete account type.
     *
     */
    public function testDeleteAccountType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAccountingPeriod
     *
     * Delete accounting period.
     *
     */
    public function testDeleteAccountingPeriod()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAccountsForAccountingPeriod
     *
     * Delete accounts for accounting period.
     *
     */
    public function testDeleteAccountsForAccountingPeriod()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteCashDiscount
     *
     * Delete cash discount.
     *
     */
    public function testDeleteCashDiscount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteClient
     *
     * Delete client.
     *
     */
    public function testDeleteClient()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteCostCenter
     *
     * Delete cost center.
     *
     */
    public function testDeleteCostCenter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteTaxRate
     *
     * Delete tax rate.
     *
     */
    public function testDeleteTaxRate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteTaxType
     *
     * Delete tax type.
     *
     */
    public function testDeleteTaxType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteTransaction
     *
     * Delete transaction.
     *
     */
    public function testDeleteTransaction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteTransactionPurpose
     *
     * Delete transaction purpose.
     *
     */
    public function testDeleteTransactionPurpose()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for exportFinanceTemplate
     *
     * Epports a finance template based on the masterdata for a given accounting period.
     *
     */
    public function testExportFinanceTemplate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountById
     *
     * Get a account.
     *
     */
    public function testGetAccountById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountClassById
     *
     * Get a account class.
     *
     */
    public function testGetAccountClassById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountGroupById
     *
     * Get a account group.
     *
     */
    public function testGetAccountGroupById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountTypeById
     *
     * Get a account type.
     *
     */
    public function testGetAccountTypeById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAccountingPeriodById
     *
     * Get a accounting period.
     *
     */
    public function testGetAccountingPeriodById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllAccountClasses
     *
     * Get all account classes ordered by id.
     *
     */
    public function testGetAllAccountClasses()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllAccountGroups
     *
     * Get all account groups ordered by id.
     *
     */
    public function testGetAllAccountGroups()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllAccountTypes
     *
     * Get all account types ordered by id.
     *
     */
    public function testGetAllAccountTypes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllAccountingPeriods
     *
     * Get all accounting periods.
     *
     */
    public function testGetAllAccountingPeriods()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllAccounts
     *
     * Get all accounts ordered by accounting period and number.
     *
     */
    public function testGetAllAccounts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllCashDiscounts
     *
     * Get all cash discounts ordered by id.
     *
     */
    public function testGetAllCashDiscounts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllClients
     *
     * Get all clients.
     *
     */
    public function testGetAllClients()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllCostCenters
     *
     * Get all cost centers ordered by accounting period and number ascending.
     *
     */
    public function testGetAllCostCenters()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllDonators
     *
     * Get all donators including their donation information (e.g. donation amount).
     *
     */
    public function testGetAllDonators()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllFinanceTemplates
     *
     * Get all finance templates.
     *
     */
    public function testGetAllFinanceTemplates()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllTaxRates
     *
     * Get all tax rates ordered by id.
     *
     */
    public function testGetAllTaxRates()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllTaxTypes
     *
     * Get all tax types.
     *
     */
    public function testGetAllTaxTypes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllTransactionPurposes
     *
     * Get all transaction purposes.
     *
     */
    public function testGetAllTransactionPurposes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllTransactions
     *
     * Get all transaction.
     *
     */
    public function testGetAllTransactions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCashDiscount
     *
     * Get a cash discount.
     *
     */
    public function testGetCashDiscount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getClientById
     *
     * Get a client.
     *
     */
    public function testGetClientById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCostCenter
     *
     * Get a cost center.
     *
     */
    public function testGetCostCenter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDonationReceipt
     *
     * Get donation receipt PDFs (cover letter and attachment).
     *
     */
    public function testGetDonationReceipt()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFinanceAccountsCsv
     *
     * Your GET endpoint.
     *
     */
    public function testGetFinanceAccountsCsv()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getTaxRate
     *
     * Get a tax rate.
     *
     */
    public function testGetTaxRate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getTaxType
     *
     * Get a tax type.
     *
     */
    public function testGetTaxType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getTransactionById
     *
     * Get a transaction.
     *
     */
    public function testGetTransactionById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getTransactionPurposeById
     *
     * Get a transaction purpose.
     *
     */
    public function testGetTransactionPurposeById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for postFinanceReports
     *
     * Issue new Finance Report.
     *
     */
    public function testPostFinanceReports()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateAccount
     *
     * Update account.
     *
     */
    public function testUpdateAccount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateAccountClass
     *
     * Update account class.
     *
     */
    public function testUpdateAccountClass()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateAccountGroup
     *
     * Update account group.
     *
     */
    public function testUpdateAccountGroup()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateAccountType
     *
     * Update account type.
     *
     */
    public function testUpdateAccountType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateAccountingPeriod
     *
     * Update accounting period.
     *
     */
    public function testUpdateAccountingPeriod()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateCashDiscount
     *
     * Update cash discount.
     *
     */
    public function testUpdateCashDiscount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateClient
     *
     * Update client.
     *
     */
    public function testUpdateClient()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateCostCenter
     *
     * Update cost center.
     *
     */
    public function testUpdateCostCenter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateTaxRate
     *
     * Update tax rate.
     *
     */
    public function testUpdateTaxRate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateTaxType
     *
     * Update tax type.
     *
     */
    public function testUpdateTaxType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateTransaction
     *
     * Update transaction.
     *
     */
    public function testUpdateTransaction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateTransactionPurpose
     *
     * Update transaction purpose.
     *
     */
    public function testUpdateTransactionPurpose()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
