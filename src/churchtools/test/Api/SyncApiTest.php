<?php
/**
 * SyncApiTest
 * PHP version 5
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace StevenBuehner\ChurchTools;

use StevenBuehner\ChurchTools\Configuration;
use StevenBuehner\ChurchTools\ApiException;
use StevenBuehner\ChurchTools\ObjectSerializer;

/**
 * SyncApiTest Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SyncApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for createSyncMapping
     *
     * Create new mapping.
     *
     */
    public function testCreateSyncMapping()
    {
    }

    /**
     * Test case for deleteEntityMapping
     *
     * Delete Mapping from Database..
     *
     */
    public function testDeleteEntityMapping()
    {
    }

    /**
     * Test case for deleteSyncConflict
     *
     * Delete Conflict.
     *
     */
    public function testDeleteSyncConflict()
    {
    }

    /**
     * Test case for deleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter
     *
     * Delete all filter entities.
     *
     */
    public function testDeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter()
    {
    }

    /**
     * Test case for deleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties
     *
     * Delete all Properties for This Job.
     *
     */
    public function testDeleteSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties()
    {
    }

    /**
     * Test case for getEntityMapping
     *
     * Get One Entity Mapping.
     *
     */
    public function testGetEntityMapping()
    {
    }

    /**
     * Test case for getSyncConflict
     *
     * Fetch One Conflict.
     *
     */
    public function testGetSyncConflict()
    {
    }

    /**
     * Test case for getSyncConflicts
     *
     * Fetch all conflicts.
     *
     */
    public function testGetSyncConflicts()
    {
    }

    /**
     * Test case for getSyncExecutions
     *
     * Statistical Information about Sync Executions.
     *
     */
    public function testGetSyncExecutions()
    {
    }

    /**
     * Test case for getSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter
     *
     * Fetch all entity filters for this job.
     *
     */
    public function testGetSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter()
    {
    }

    /**
     * Test case for getSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties
     *
     * Fetch all Properties for This Job.
     *
     */
    public function testGetSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties()
    {
    }

    /**
     * Test case for getSyncFieldMappings
     *
     * Get Mapping for Domain Type.
     *
     */
    public function testGetSyncFieldMappings()
    {
    }

    /**
     * Test case for getSyncLogs
     *
     * Get Sync Logs.
     *
     */
    public function testGetSyncLogs()
    {
    }

    /**
     * Test case for getSyncMappings
     *
     * Fetch all registered mappings.
     *
     */
    public function testGetSyncMappings()
    {
    }

    /**
     * Test case for postSyncExternalsystems
     *
     * Create external system.
     *
     */
    public function testPostSyncExternalsystems()
    {
    }

    /**
     * Test case for postSyncExternalsystemsExternalSystemIdJobconfigsJobIdStart
     *
     * Start Execution.
     *
     */
    public function testPostSyncExternalsystemsExternalSystemIdJobconfigsJobIdStart()
    {
    }

    /**
     * Test case for postSyncLogs
     *
     * Save Sync Logs.
     *
     */
    public function testPostSyncLogs()
    {
    }

    /**
     * Test case for putSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter
     *
     * Save entity filters.
     *
     */
    public function testPutSyncExternalsystemsExternalSystemIdJobconfigsJobIdFilter()
    {
    }

    /**
     * Test case for putSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties
     *
     * Save Properties, Which Should Be Synced.
     *
     */
    public function testPutSyncExternalsystemsExternalSystemIdJobconfigsJobIdProperties()
    {
    }

    /**
     * Test case for putSyncFieldMappings
     *
     * Save Mapping for Domain Type.
     *
     */
    public function testPutSyncFieldMappings()
    {
    }

    /**
     * Test case for saveSyncConflict
     *
     * Save new detected conflict.
     *
     */
    public function testSaveSyncConflict()
    {
    }

    /**
     * Test case for updateEntityMapping
     *
     * Update or Create Mapping.
     *
     */
    public function testUpdateEntityMapping()
    {
    }

    /**
     * Test case for updateSyncConflict
     *
     * Update Conflict.
     *
     */
    public function testUpdateSyncConflict()
    {
    }
}
