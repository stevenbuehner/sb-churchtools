<?php
/**
 * JobApi
 * PHP version 5
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace StevenBuehner\ChurchTools\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StevenBuehner\ChurchTools\ApiException;
use StevenBuehner\ChurchTools\Configuration;
use StevenBuehner\ChurchTools\HeaderSelector;
use StevenBuehner\ChurchTools\ObjectSerializer;

/**
 * JobApi Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getJobs
     *
     * Your GET endpoint
     *
     * @param  array $status status (optional)
     * @param  string $name name (optional)
     * @param  array $domain_ids domain_ids (optional)
     * @param  string $created_start_date created_start_date (optional)
     * @param  string $created_end_date created_end_date (optional)
     * @param  string $modified_start_date modified_start_date (optional)
     * @param  string $modified_end_date modified_end_date (optional)
     *
     * @throws \StevenBuehner\ChurchTools\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StevenBuehner\ChurchTools\Model\InlineResponse200114
     */
    public function getJobs($status = null, $name = null, $domain_ids = null, $created_start_date = null, $created_end_date = null, $modified_start_date = null, $modified_end_date = null)
    {
        list($response) = $this->getJobsWithHttpInfo($status, $name, $domain_ids, $created_start_date, $created_end_date, $modified_start_date, $modified_end_date);
        return $response;
    }

    /**
     * Operation getJobsWithHttpInfo
     *
     * Your GET endpoint
     *
     * @param  array $status (optional)
     * @param  string $name (optional)
     * @param  array $domain_ids (optional)
     * @param  string $created_start_date (optional)
     * @param  string $created_end_date (optional)
     * @param  string $modified_start_date (optional)
     * @param  string $modified_end_date (optional)
     *
     * @throws \StevenBuehner\ChurchTools\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StevenBuehner\ChurchTools\Model\InlineResponse200114, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobsWithHttpInfo($status = null, $name = null, $domain_ids = null, $created_start_date = null, $created_end_date = null, $modified_start_date = null, $modified_end_date = null)
    {
        $returnType = '\StevenBuehner\ChurchTools\Model\InlineResponse200114';
        $request = $this->getJobsRequest($status, $name, $domain_ids, $created_start_date, $created_end_date, $modified_start_date, $modified_end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StevenBuehner\ChurchTools\Model\InlineResponse200114',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJobsAsync
     *
     * Your GET endpoint
     *
     * @param  array $status (optional)
     * @param  string $name (optional)
     * @param  array $domain_ids (optional)
     * @param  string $created_start_date (optional)
     * @param  string $created_end_date (optional)
     * @param  string $modified_start_date (optional)
     * @param  string $modified_end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobsAsync($status = null, $name = null, $domain_ids = null, $created_start_date = null, $created_end_date = null, $modified_start_date = null, $modified_end_date = null)
    {
        return $this->getJobsAsyncWithHttpInfo($status, $name, $domain_ids, $created_start_date, $created_end_date, $modified_start_date, $modified_end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJobsAsyncWithHttpInfo
     *
     * Your GET endpoint
     *
     * @param  array $status (optional)
     * @param  string $name (optional)
     * @param  array $domain_ids (optional)
     * @param  string $created_start_date (optional)
     * @param  string $created_end_date (optional)
     * @param  string $modified_start_date (optional)
     * @param  string $modified_end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobsAsyncWithHttpInfo($status = null, $name = null, $domain_ids = null, $created_start_date = null, $created_end_date = null, $modified_start_date = null, $modified_end_date = null)
    {
        $returnType = '\StevenBuehner\ChurchTools\Model\InlineResponse200114';
        $request = $this->getJobsRequest($status, $name, $domain_ids, $created_start_date, $created_end_date, $modified_start_date, $modified_end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJobs'
     *
     * @param  array $status (optional)
     * @param  string $name (optional)
     * @param  array $domain_ids (optional)
     * @param  string $created_start_date (optional)
     * @param  string $created_end_date (optional)
     * @param  string $modified_start_date (optional)
     * @param  string $modified_end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJobsRequest($status = null, $name = null, $domain_ids = null, $created_start_date = null, $created_end_date = null, $modified_start_date = null, $modified_end_date = null)
    {

        $resourcePath = '/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($domain_ids !== null) {
            $queryParams['domain_ids'] = ObjectSerializer::toQueryValue($domain_ids, null);
        }
        // query params
        if ($created_start_date !== null) {
            $queryParams['created_start_date'] = ObjectSerializer::toQueryValue($created_start_date, null);
        }
        // query params
        if ($created_end_date !== null) {
            $queryParams['created_end_date'] = ObjectSerializer::toQueryValue($created_end_date, null);
        }
        // query params
        if ($modified_start_date !== null) {
            $queryParams['modified_start_date'] = ObjectSerializer::toQueryValue($modified_start_date, null);
        }
        // query params
        if ($modified_end_date !== null) {
            $queryParams['modified_end_date'] = ObjectSerializer::toQueryValue($modified_end_date, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
