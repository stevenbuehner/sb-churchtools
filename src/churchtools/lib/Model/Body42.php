<?php
/**
 * Body42
 *
 * PHP version 5
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace StevenBuehner\ChurchTools\Model;

use \ArrayAccess;
use \StevenBuehner\ChurchTools\ObjectSerializer;

/**
 * Body42 Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body42 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_42';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_date' => '\DateTime',
'document_number' => 'string',
'account_id' => 'int',
'contra_account_id' => 'int',
'amount' => 'float',
'note' => 'string',
'cost_center_id' => 'int',
'donator_id' => 'int',
'donator_spouse_id' => 'int',
'split_transaction_id' => 'int',
'tax_rate_id' => 'int',
'tax_amount' => 'float',
'cash_discount_id' => 'int',
'cash_discount_amount' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'document_date' => 'date',
'document_number' => null,
'account_id' => null,
'contra_account_id' => null,
'amount' => 'integer',
'note' => null,
'cost_center_id' => null,
'donator_id' => null,
'donator_spouse_id' => null,
'split_transaction_id' => null,
'tax_rate_id' => null,
'tax_amount' => 'integer',
'cash_discount_id' => null,
'cash_discount_amount' => 'integer'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_date' => 'documentDate',
'document_number' => 'documentNumber',
'account_id' => 'accountId',
'contra_account_id' => 'contraAccountId',
'amount' => 'amount',
'note' => 'note',
'cost_center_id' => 'costCenterId',
'donator_id' => 'donatorId',
'donator_spouse_id' => 'donatorSpouseId',
'split_transaction_id' => 'splitTransactionId',
'tax_rate_id' => 'taxRateId',
'tax_amount' => 'taxAmount',
'cash_discount_id' => 'cashDiscountId',
'cash_discount_amount' => 'cashDiscountAmount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_date' => 'setDocumentDate',
'document_number' => 'setDocumentNumber',
'account_id' => 'setAccountId',
'contra_account_id' => 'setContraAccountId',
'amount' => 'setAmount',
'note' => 'setNote',
'cost_center_id' => 'setCostCenterId',
'donator_id' => 'setDonatorId',
'donator_spouse_id' => 'setDonatorSpouseId',
'split_transaction_id' => 'setSplitTransactionId',
'tax_rate_id' => 'setTaxRateId',
'tax_amount' => 'setTaxAmount',
'cash_discount_id' => 'setCashDiscountId',
'cash_discount_amount' => 'setCashDiscountAmount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_date' => 'getDocumentDate',
'document_number' => 'getDocumentNumber',
'account_id' => 'getAccountId',
'contra_account_id' => 'getContraAccountId',
'amount' => 'getAmount',
'note' => 'getNote',
'cost_center_id' => 'getCostCenterId',
'donator_id' => 'getDonatorId',
'donator_spouse_id' => 'getDonatorSpouseId',
'split_transaction_id' => 'getSplitTransactionId',
'tax_rate_id' => 'getTaxRateId',
'tax_amount' => 'getTaxAmount',
'cash_discount_id' => 'getCashDiscountId',
'cash_discount_amount' => 'getCashDiscountAmount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_date'] = isset($data['document_date']) ? $data['document_date'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['contra_account_id'] = isset($data['contra_account_id']) ? $data['contra_account_id'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['cost_center_id'] = isset($data['cost_center_id']) ? $data['cost_center_id'] : null;
        $this->container['donator_id'] = isset($data['donator_id']) ? $data['donator_id'] : null;
        $this->container['donator_spouse_id'] = isset($data['donator_spouse_id']) ? $data['donator_spouse_id'] : null;
        $this->container['split_transaction_id'] = isset($data['split_transaction_id']) ? $data['split_transaction_id'] : null;
        $this->container['tax_rate_id'] = isset($data['tax_rate_id']) ? $data['tax_rate_id'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['cash_discount_id'] = isset($data['cash_discount_id']) ? $data['cash_discount_id'] : null;
        $this->container['cash_discount_amount'] = isset($data['cash_discount_amount']) ? $data['cash_discount_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['document_date'] === null) {
            $invalidProperties[] = "'document_date' can't be null";
        }
        if ($this->container['document_number'] === null) {
            $invalidProperties[] = "'document_number' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['contra_account_id'] === null) {
            $invalidProperties[] = "'contra_account_id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_date
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime $document_date document_date
     *
     * @return $this
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number document_number
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets contra_account_id
     *
     * @return int
     */
    public function getContraAccountId()
    {
        return $this->container['contra_account_id'];
    }

    /**
     * Sets contra_account_id
     *
     * @param int $contra_account_id contra_account_id
     *
     * @return $this
     */
    public function setContraAccountId($contra_account_id)
    {
        $this->container['contra_account_id'] = $contra_account_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Value is in cent.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets cost_center_id
     *
     * @return int
     */
    public function getCostCenterId()
    {
        return $this->container['cost_center_id'];
    }

    /**
     * Sets cost_center_id
     *
     * @param int $cost_center_id cost_center_id
     *
     * @return $this
     */
    public function setCostCenterId($cost_center_id)
    {
        $this->container['cost_center_id'] = $cost_center_id;

        return $this;
    }

    /**
     * Gets donator_id
     *
     * @return int
     */
    public function getDonatorId()
    {
        return $this->container['donator_id'];
    }

    /**
     * Sets donator_id
     *
     * @param int $donator_id donator_id
     *
     * @return $this
     */
    public function setDonatorId($donator_id)
    {
        $this->container['donator_id'] = $donator_id;

        return $this;
    }

    /**
     * Gets donator_spouse_id
     *
     * @return int
     */
    public function getDonatorSpouseId()
    {
        return $this->container['donator_spouse_id'];
    }

    /**
     * Sets donator_spouse_id
     *
     * @param int $donator_spouse_id donator_spouse_id
     *
     * @return $this
     */
    public function setDonatorSpouseId($donator_spouse_id)
    {
        $this->container['donator_spouse_id'] = $donator_spouse_id;

        return $this;
    }

    /**
     * Gets split_transaction_id
     *
     * @return int
     */
    public function getSplitTransactionId()
    {
        return $this->container['split_transaction_id'];
    }

    /**
     * Sets split_transaction_id
     *
     * @param int $split_transaction_id split_transaction_id
     *
     * @return $this
     */
    public function setSplitTransactionId($split_transaction_id)
    {
        $this->container['split_transaction_id'] = $split_transaction_id;

        return $this;
    }

    /**
     * Gets tax_rate_id
     *
     * @return int
     */
    public function getTaxRateId()
    {
        return $this->container['tax_rate_id'];
    }

    /**
     * Sets tax_rate_id
     *
     * @param int $tax_rate_id tax_rate_id
     *
     * @return $this
     */
    public function setTaxRateId($tax_rate_id)
    {
        $this->container['tax_rate_id'] = $tax_rate_id;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return float
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param float $tax_amount Value is in cent.
     *
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets cash_discount_id
     *
     * @return int
     */
    public function getCashDiscountId()
    {
        return $this->container['cash_discount_id'];
    }

    /**
     * Sets cash_discount_id
     *
     * @param int $cash_discount_id cash_discount_id
     *
     * @return $this
     */
    public function setCashDiscountId($cash_discount_id)
    {
        $this->container['cash_discount_id'] = $cash_discount_id;

        return $this;
    }

    /**
     * Gets cash_discount_amount
     *
     * @return float
     */
    public function getCashDiscountAmount()
    {
        return $this->container['cash_discount_amount'];
    }

    /**
     * Sets cash_discount_amount
     *
     * @param float $cash_discount_amount Value is in cent.
     *
     * @return $this
     */
    public function setCashDiscountAmount($cash_discount_amount)
    {
        $this->container['cash_discount_amount'] = $cash_discount_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
