<?php
/**
 * InlineResponse20045Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace StevenBuehner\ChurchTools\Model;

use \ArrayAccess;
use \StevenBuehner\ChurchTools\ObjectSerializer;

/**
 * InlineResponse20045Data Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20045Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_45_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clients' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataClients[]',
'accounting_periods' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountingPeriods[]',
'accounts' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataAccounts[]',
'account_types' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountTypes[]',
'account_classes' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountClasses[]',
'account_groups' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountGroups[]',
'cash_discounts' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataCashDiscounts[]',
'cost_centers' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataCostCenters[]',
'tax_rates' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataTaxRates[]',
'tax_types' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataTaxTypes[]',
'transaction_purposes' => '\StevenBuehner\ChurchTools\Model\FinanceMasterDataTransactionPurposes[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clients' => null,
'accounting_periods' => null,
'accounts' => null,
'account_types' => null,
'account_classes' => null,
'account_groups' => null,
'cash_discounts' => null,
'cost_centers' => null,
'tax_rates' => null,
'tax_types' => null,
'transaction_purposes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clients' => 'clients',
'accounting_periods' => 'accountingPeriods',
'accounts' => 'accounts',
'account_types' => 'accountTypes',
'account_classes' => 'accountClasses',
'account_groups' => 'accountGroups',
'cash_discounts' => 'cashDiscounts',
'cost_centers' => 'costCenters',
'tax_rates' => 'taxRates',
'tax_types' => 'taxTypes',
'transaction_purposes' => 'transactionPurposes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clients' => 'setClients',
'accounting_periods' => 'setAccountingPeriods',
'accounts' => 'setAccounts',
'account_types' => 'setAccountTypes',
'account_classes' => 'setAccountClasses',
'account_groups' => 'setAccountGroups',
'cash_discounts' => 'setCashDiscounts',
'cost_centers' => 'setCostCenters',
'tax_rates' => 'setTaxRates',
'tax_types' => 'setTaxTypes',
'transaction_purposes' => 'setTransactionPurposes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clients' => 'getClients',
'accounting_periods' => 'getAccountingPeriods',
'accounts' => 'getAccounts',
'account_types' => 'getAccountTypes',
'account_classes' => 'getAccountClasses',
'account_groups' => 'getAccountGroups',
'cash_discounts' => 'getCashDiscounts',
'cost_centers' => 'getCostCenters',
'tax_rates' => 'getTaxRates',
'tax_types' => 'getTaxTypes',
'transaction_purposes' => 'getTransactionPurposes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clients'] = isset($data['clients']) ? $data['clients'] : null;
        $this->container['accounting_periods'] = isset($data['accounting_periods']) ? $data['accounting_periods'] : null;
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['account_types'] = isset($data['account_types']) ? $data['account_types'] : null;
        $this->container['account_classes'] = isset($data['account_classes']) ? $data['account_classes'] : null;
        $this->container['account_groups'] = isset($data['account_groups']) ? $data['account_groups'] : null;
        $this->container['cash_discounts'] = isset($data['cash_discounts']) ? $data['cash_discounts'] : null;
        $this->container['cost_centers'] = isset($data['cost_centers']) ? $data['cost_centers'] : null;
        $this->container['tax_rates'] = isset($data['tax_rates']) ? $data['tax_rates'] : null;
        $this->container['tax_types'] = isset($data['tax_types']) ? $data['tax_types'] : null;
        $this->container['transaction_purposes'] = isset($data['transaction_purposes']) ? $data['transaction_purposes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clients
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataClients[]
     */
    public function getClients()
    {
        return $this->container['clients'];
    }

    /**
     * Sets clients
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataClients[] $clients clients
     *
     * @return $this
     */
    public function setClients($clients)
    {
        $this->container['clients'] = $clients;

        return $this;
    }

    /**
     * Gets accounting_periods
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountingPeriods[]
     */
    public function getAccountingPeriods()
    {
        return $this->container['accounting_periods'];
    }

    /**
     * Sets accounting_periods
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountingPeriods[] $accounting_periods accounting_periods
     *
     * @return $this
     */
    public function setAccountingPeriods($accounting_periods)
    {
        $this->container['accounting_periods'] = $accounting_periods;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataAccounts[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataAccounts[] $accounts accounts
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets account_types
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountTypes[]
     */
    public function getAccountTypes()
    {
        return $this->container['account_types'];
    }

    /**
     * Sets account_types
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountTypes[] $account_types account_types
     *
     * @return $this
     */
    public function setAccountTypes($account_types)
    {
        $this->container['account_types'] = $account_types;

        return $this;
    }

    /**
     * Gets account_classes
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountClasses[]
     */
    public function getAccountClasses()
    {
        return $this->container['account_classes'];
    }

    /**
     * Sets account_classes
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountClasses[] $account_classes account_classes
     *
     * @return $this
     */
    public function setAccountClasses($account_classes)
    {
        $this->container['account_classes'] = $account_classes;

        return $this;
    }

    /**
     * Gets account_groups
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountGroups[]
     */
    public function getAccountGroups()
    {
        return $this->container['account_groups'];
    }

    /**
     * Sets account_groups
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataAccountGroups[] $account_groups account_groups
     *
     * @return $this
     */
    public function setAccountGroups($account_groups)
    {
        $this->container['account_groups'] = $account_groups;

        return $this;
    }

    /**
     * Gets cash_discounts
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataCashDiscounts[]
     */
    public function getCashDiscounts()
    {
        return $this->container['cash_discounts'];
    }

    /**
     * Sets cash_discounts
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataCashDiscounts[] $cash_discounts cash_discounts
     *
     * @return $this
     */
    public function setCashDiscounts($cash_discounts)
    {
        $this->container['cash_discounts'] = $cash_discounts;

        return $this;
    }

    /**
     * Gets cost_centers
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataCostCenters[]
     */
    public function getCostCenters()
    {
        return $this->container['cost_centers'];
    }

    /**
     * Sets cost_centers
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataCostCenters[] $cost_centers cost_centers
     *
     * @return $this
     */
    public function setCostCenters($cost_centers)
    {
        $this->container['cost_centers'] = $cost_centers;

        return $this;
    }

    /**
     * Gets tax_rates
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataTaxRates[]
     */
    public function getTaxRates()
    {
        return $this->container['tax_rates'];
    }

    /**
     * Sets tax_rates
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataTaxRates[] $tax_rates tax_rates
     *
     * @return $this
     */
    public function setTaxRates($tax_rates)
    {
        $this->container['tax_rates'] = $tax_rates;

        return $this;
    }

    /**
     * Gets tax_types
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataTaxTypes[]
     */
    public function getTaxTypes()
    {
        return $this->container['tax_types'];
    }

    /**
     * Sets tax_types
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataTaxTypes[] $tax_types tax_types
     *
     * @return $this
     */
    public function setTaxTypes($tax_types)
    {
        $this->container['tax_types'] = $tax_types;

        return $this;
    }

    /**
     * Gets transaction_purposes
     *
     * @return \StevenBuehner\ChurchTools\Model\FinanceMasterDataTransactionPurposes[]
     */
    public function getTransactionPurposes()
    {
        return $this->container['transaction_purposes'];
    }

    /**
     * Sets transaction_purposes
     *
     * @param \StevenBuehner\ChurchTools\Model\FinanceMasterDataTransactionPurposes[] $transaction_purposes transaction_purposes
     *
     * @return $this
     */
    public function setTransactionPurposes($transaction_purposes)
    {
        $this->container['transaction_purposes'] = $transaction_purposes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
