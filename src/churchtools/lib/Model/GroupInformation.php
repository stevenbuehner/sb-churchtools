<?php
/**
 * GroupInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace StevenBuehner\ChurchTools\Model;

use \ArrayAccess;
use \StevenBuehner\ChurchTools\ObjectSerializer;

/**
 * GroupInformation Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Group_information';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'image_url' => 'string',
'date_of_foundation' => '\DateTime',
'end_date' => '\DateTime',
'meeting_time' => 'string',
'weekday' => 'int',
'group_category_id' => 'int',
'age_groups' => 'int[]',
'target_group_id' => 'int',
'max_members' => 'int',
'group_type_id' => 'int',
'group_status_id' => 'int',
'note' => 'string',
'campus_id' => 'int',
'chat_status' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'image_url' => null,
'date_of_foundation' => 'date',
'end_date' => 'date',
'meeting_time' => null,
'weekday' => null,
'group_category_id' => null,
'age_groups' => null,
'target_group_id' => null,
'max_members' => null,
'group_type_id' => null,
'group_status_id' => null,
'note' => null,
'campus_id' => null,
'chat_status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image_url' => 'imageUrl',
'date_of_foundation' => 'dateOfFoundation',
'end_date' => 'endDate',
'meeting_time' => 'meetingTime',
'weekday' => 'weekday',
'group_category_id' => 'groupCategoryId',
'age_groups' => 'ageGroups',
'target_group_id' => 'targetGroupId',
'max_members' => 'maxMembers',
'group_type_id' => 'groupTypeId',
'group_status_id' => 'groupStatusId',
'note' => 'note',
'campus_id' => 'campusId',
'chat_status' => 'chatStatus'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image_url' => 'setImageUrl',
'date_of_foundation' => 'setDateOfFoundation',
'end_date' => 'setEndDate',
'meeting_time' => 'setMeetingTime',
'weekday' => 'setWeekday',
'group_category_id' => 'setGroupCategoryId',
'age_groups' => 'setAgeGroups',
'target_group_id' => 'setTargetGroupId',
'max_members' => 'setMaxMembers',
'group_type_id' => 'setGroupTypeId',
'group_status_id' => 'setGroupStatusId',
'note' => 'setNote',
'campus_id' => 'setCampusId',
'chat_status' => 'setChatStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image_url' => 'getImageUrl',
'date_of_foundation' => 'getDateOfFoundation',
'end_date' => 'getEndDate',
'meeting_time' => 'getMeetingTime',
'weekday' => 'getWeekday',
'group_category_id' => 'getGroupCategoryId',
'age_groups' => 'getAgeGroups',
'target_group_id' => 'getTargetGroupId',
'max_members' => 'getMaxMembers',
'group_type_id' => 'getGroupTypeId',
'group_status_id' => 'getGroupStatusId',
'note' => 'getNote',
'campus_id' => 'getCampusId',
'chat_status' => 'getChatStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : 'null';
        $this->container['date_of_foundation'] = isset($data['date_of_foundation']) ? $data['date_of_foundation'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['meeting_time'] = isset($data['meeting_time']) ? $data['meeting_time'] : null;
        $this->container['weekday'] = isset($data['weekday']) ? $data['weekday'] : null;
        $this->container['group_category_id'] = isset($data['group_category_id']) ? $data['group_category_id'] : null;
        $this->container['age_groups'] = isset($data['age_groups']) ? $data['age_groups'] : null;
        $this->container['target_group_id'] = isset($data['target_group_id']) ? $data['target_group_id'] : null;
        $this->container['max_members'] = isset($data['max_members']) ? $data['max_members'] : null;
        $this->container['group_type_id'] = isset($data['group_type_id']) ? $data['group_type_id'] : null;
        $this->container['group_status_id'] = isset($data['group_status_id']) ? $data['group_status_id'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['campus_id'] = isset($data['campus_id']) ? $data['campus_id'] : null;
        $this->container['chat_status'] = isset($data['chat_status']) ? $data['chat_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets date_of_foundation
     *
     * @return \DateTime
     */
    public function getDateOfFoundation()
    {
        return $this->container['date_of_foundation'];
    }

    /**
     * Sets date_of_foundation
     *
     * @param \DateTime $date_of_foundation date_of_foundation
     *
     * @return $this
     */
    public function setDateOfFoundation($date_of_foundation)
    {
        $this->container['date_of_foundation'] = $date_of_foundation;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets meeting_time
     *
     * @return string
     */
    public function getMeetingTime()
    {
        return $this->container['meeting_time'];
    }

    /**
     * Sets meeting_time
     *
     * @param string $meeting_time meeting_time
     *
     * @return $this
     */
    public function setMeetingTime($meeting_time)
    {
        $this->container['meeting_time'] = $meeting_time;

        return $this;
    }

    /**
     * Gets weekday
     *
     * @return int
     */
    public function getWeekday()
    {
        return $this->container['weekday'];
    }

    /**
     * Sets weekday
     *
     * @param int $weekday The number of the weekday. Starting with 0 = Sunday, 1 = Monday, ...
     *
     * @return $this
     */
    public function setWeekday($weekday)
    {
        $this->container['weekday'] = $weekday;

        return $this;
    }

    /**
     * Gets group_category_id
     *
     * @return int
     */
    public function getGroupCategoryId()
    {
        return $this->container['group_category_id'];
    }

    /**
     * Sets group_category_id
     *
     * @param int $group_category_id group_category_id
     *
     * @return $this
     */
    public function setGroupCategoryId($group_category_id)
    {
        $this->container['group_category_id'] = $group_category_id;

        return $this;
    }

    /**
     * Gets age_groups
     *
     * @return int[]
     */
    public function getAgeGroups()
    {
        return $this->container['age_groups'];
    }

    /**
     * Sets age_groups
     *
     * @param int[] $age_groups age_groups
     *
     * @return $this
     */
    public function setAgeGroups($age_groups)
    {
        $this->container['age_groups'] = $age_groups;

        return $this;
    }

    /**
     * Gets target_group_id
     *
     * @return int
     */
    public function getTargetGroupId()
    {
        return $this->container['target_group_id'];
    }

    /**
     * Sets target_group_id
     *
     * @param int $target_group_id target_group_id
     *
     * @return $this
     */
    public function setTargetGroupId($target_group_id)
    {
        $this->container['target_group_id'] = $target_group_id;

        return $this;
    }

    /**
     * Gets max_members
     *
     * @return int
     */
    public function getMaxMembers()
    {
        return $this->container['max_members'];
    }

    /**
     * Sets max_members
     *
     * @param int $max_members max_members
     *
     * @return $this
     */
    public function setMaxMembers($max_members)
    {
        $this->container['max_members'] = $max_members;

        return $this;
    }

    /**
     * Gets group_type_id
     *
     * @return int
     */
    public function getGroupTypeId()
    {
        return $this->container['group_type_id'];
    }

    /**
     * Sets group_type_id
     *
     * @param int $group_type_id group_type_id
     *
     * @return $this
     */
    public function setGroupTypeId($group_type_id)
    {
        $this->container['group_type_id'] = $group_type_id;

        return $this;
    }

    /**
     * Gets group_status_id
     *
     * @return int
     */
    public function getGroupStatusId()
    {
        return $this->container['group_status_id'];
    }

    /**
     * Sets group_status_id
     *
     * @param int $group_status_id group_status_id
     *
     * @return $this
     */
    public function setGroupStatusId($group_status_id)
    {
        $this->container['group_status_id'] = $group_status_id;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets campus_id
     *
     * @return int
     */
    public function getCampusId()
    {
        return $this->container['campus_id'];
    }

    /**
     * Sets campus_id
     *
     * @param int $campus_id campus_id
     *
     * @return $this
     */
    public function setCampusId($campus_id)
    {
        $this->container['campus_id'] = $campus_id;

        return $this;
    }

    /**
     * Gets chat_status
     *
     * @return string
     */
    public function getChatStatus()
    {
        return $this->container['chat_status'];
    }

    /**
     * Sets chat_status
     *
     * @param string $chat_status status of group chat
     *
     * @return $this
     */
    public function setChatStatus($chat_status)
    {
        $this->container['chat_status'] = $chat_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
