<?php
/**
 * AgendaItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace StevenBuehner\ChurchTools\Model;

use \ArrayAccess;
use \StevenBuehner\ChurchTools\ObjectSerializer;

/**
 * AgendaItem Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AgendaItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Agenda Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'position' => 'int',
'type' => 'string',
'title' => 'string',
'note' => 'string',
'duration' => 'int',
'start' => '\DateTime',
'is_before_event' => 'bool',
'responsible' => '\StevenBuehner\ChurchTools\Model\AgendaResponsible',
'service_group_notes' => '\StevenBuehner\ChurchTools\Model\AgendaServiceGroupNotes[]',
'song' => '\StevenBuehner\ChurchTools\Model\AgendaSong',
'meta' => '\StevenBuehner\ChurchTools\Model\AgendaMeta',
'start_times' => '\StevenBuehner\ChurchTools\Model\AgendaStartTimes'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'position' => null,
'type' => null,
'title' => null,
'note' => null,
'duration' => null,
'start' => 'date-time',
'is_before_event' => null,
'responsible' => null,
'service_group_notes' => null,
'song' => null,
'meta' => null,
'start_times' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'position' => 'position',
'type' => 'type',
'title' => 'title',
'note' => 'note',
'duration' => 'duration',
'start' => 'start',
'is_before_event' => 'isBeforeEvent',
'responsible' => 'responsible',
'service_group_notes' => 'serviceGroupNotes',
'song' => 'song',
'meta' => 'meta',
'start_times' => 'startTimes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'position' => 'setPosition',
'type' => 'setType',
'title' => 'setTitle',
'note' => 'setNote',
'duration' => 'setDuration',
'start' => 'setStart',
'is_before_event' => 'setIsBeforeEvent',
'responsible' => 'setResponsible',
'service_group_notes' => 'setServiceGroupNotes',
'song' => 'setSong',
'meta' => 'setMeta',
'start_times' => 'setStartTimes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'position' => 'getPosition',
'type' => 'getType',
'title' => 'getTitle',
'note' => 'getNote',
'duration' => 'getDuration',
'start' => 'getStart',
'is_before_event' => 'getIsBeforeEvent',
'responsible' => 'getResponsible',
'service_group_notes' => 'getServiceGroupNotes',
'song' => 'getSong',
'meta' => 'getMeta',
'start_times' => 'getStartTimes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_NORMAL = 'normal';
const TYPE_SONG = 'song';
const TYPE_HEADER = 'header';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NORMAL,
self::TYPE_SONG,
self::TYPE_HEADER,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['is_before_event'] = isset($data['is_before_event']) ? $data['is_before_event'] : null;
        $this->container['responsible'] = isset($data['responsible']) ? $data['responsible'] : null;
        $this->container['service_group_notes'] = isset($data['service_group_notes']) ? $data['service_group_notes'] : null;
        $this->container['song'] = isset($data['song']) ? $data['song'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['start_times'] = isset($data['start_times']) ? $data['start_times'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration Duration of agenda item in seconds.
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start The start time of a position is dynamically calculated based on previous items and the start time of the event.
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets is_before_event
     *
     * @return bool
     */
    public function getIsBeforeEvent()
    {
        return $this->container['is_before_event'];
    }

    /**
     * Sets is_before_event
     *
     * @param bool $is_before_event is_before_event
     *
     * @return $this
     */
    public function setIsBeforeEvent($is_before_event)
    {
        $this->container['is_before_event'] = $is_before_event;

        return $this;
    }

    /**
     * Gets responsible
     *
     * @return \StevenBuehner\ChurchTools\Model\AgendaResponsible
     */
    public function getResponsible()
    {
        return $this->container['responsible'];
    }

    /**
     * Sets responsible
     *
     * @param \StevenBuehner\ChurchTools\Model\AgendaResponsible $responsible responsible
     *
     * @return $this
     */
    public function setResponsible($responsible)
    {
        $this->container['responsible'] = $responsible;

        return $this;
    }

    /**
     * Gets service_group_notes
     *
     * @return \StevenBuehner\ChurchTools\Model\AgendaServiceGroupNotes[]
     */
    public function getServiceGroupNotes()
    {
        return $this->container['service_group_notes'];
    }

    /**
     * Sets service_group_notes
     *
     * @param \StevenBuehner\ChurchTools\Model\AgendaServiceGroupNotes[] $service_group_notes Array of notes per service group. You will only see the service groups, you are allowed to see.
     *
     * @return $this
     */
    public function setServiceGroupNotes($service_group_notes)
    {
        $this->container['service_group_notes'] = $service_group_notes;

        return $this;
    }

    /**
     * Gets song
     *
     * @return \StevenBuehner\ChurchTools\Model\AgendaSong
     */
    public function getSong()
    {
        return $this->container['song'];
    }

    /**
     * Sets song
     *
     * @param \StevenBuehner\ChurchTools\Model\AgendaSong $song song
     *
     * @return $this
     */
    public function setSong($song)
    {
        $this->container['song'] = $song;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \StevenBuehner\ChurchTools\Model\AgendaMeta
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \StevenBuehner\ChurchTools\Model\AgendaMeta $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets start_times
     *
     * @return \StevenBuehner\ChurchTools\Model\AgendaStartTimes
     */
    public function getStartTimes()
    {
        return $this->container['start_times'];
    }

    /**
     * Sets start_times
     *
     * @param \StevenBuehner\ChurchTools\Model\AgendaStartTimes $start_times start_times
     *
     * @return $this
     */
    public function setStartTimes($start_times)
    {
        $this->container['start_times'] = $start_times;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
