<?php
/**
 * InlineResponse20017DataSettings
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StevenBuehner\ChurchTools\Model;

use \ArrayAccess;
use \StevenBuehner\ChurchTools\ObjectSerializer;

/**
 * InlineResponse20017DataSettings Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20017DataSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_17_data_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_hidden' => 'bool',
        'is_open_for_members' => 'bool',
        'auto_accept' => 'bool',
        'is_public' => 'bool',
        'in_statistic' => 'bool',
        'group_meeting' => '\StevenBuehner\ChurchTools\Model\InlineResponse20017DataSettingsGroupMeeting',
        'inform_leader' => 'bool',
        'new_member' => '\StevenBuehner\ChurchTools\Model\InlineResponse20017DataSettingsNewMember'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_hidden' => null,
        'is_open_for_members' => null,
        'auto_accept' => null,
        'is_public' => null,
        'in_statistic' => null,
        'group_meeting' => null,
        'inform_leader' => null,
        'new_member' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_hidden' => 'isHidden',
        'is_open_for_members' => 'isOpenForMembers',
        'auto_accept' => 'autoAccept',
        'is_public' => 'isPublic',
        'in_statistic' => 'inStatistic',
        'group_meeting' => 'groupMeeting',
        'inform_leader' => 'informLeader',
        'new_member' => 'newMember'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_hidden' => 'setIsHidden',
        'is_open_for_members' => 'setIsOpenForMembers',
        'auto_accept' => 'setAutoAccept',
        'is_public' => 'setIsPublic',
        'in_statistic' => 'setInStatistic',
        'group_meeting' => 'setGroupMeeting',
        'inform_leader' => 'setInformLeader',
        'new_member' => 'setNewMember'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_hidden' => 'getIsHidden',
        'is_open_for_members' => 'getIsOpenForMembers',
        'auto_accept' => 'getAutoAccept',
        'is_public' => 'getIsPublic',
        'in_statistic' => 'getInStatistic',
        'group_meeting' => 'getGroupMeeting',
        'inform_leader' => 'getInformLeader',
        'new_member' => 'getNewMember'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_hidden'] = $data['is_hidden'] ?? null;
        $this->container['is_open_for_members'] = $data['is_open_for_members'] ?? null;
        $this->container['auto_accept'] = $data['auto_accept'] ?? null;
        $this->container['is_public'] = $data['is_public'] ?? null;
        $this->container['in_statistic'] = $data['in_statistic'] ?? null;
        $this->container['group_meeting'] = $data['group_meeting'] ?? null;
        $this->container['inform_leader'] = $data['inform_leader'] ?? null;
        $this->container['new_member'] = $data['new_member'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_hidden
     *
     * @return bool|null
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool|null $is_hidden is_hidden
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_open_for_members
     *
     * @return bool|null
     */
    public function getIsOpenForMembers()
    {
        return $this->container['is_open_for_members'];
    }

    /**
     * Sets is_open_for_members
     *
     * @param bool|null $is_open_for_members Indicator if people can apply for participation.
     *
     * @return self
     */
    public function setIsOpenForMembers($is_open_for_members)
    {
        $this->container['is_open_for_members'] = $is_open_for_members;

        return $this;
    }

    /**
     * Gets auto_accept
     *
     * @return bool|null
     */
    public function getAutoAccept()
    {
        return $this->container['auto_accept'];
    }

    /**
     * Sets auto_accept
     *
     * @param bool|null $auto_accept Indicator if applications are accepted automatically.
     *
     * @return self
     */
    public function setAutoAccept($auto_accept)
    {
        $this->container['auto_accept'] = $auto_accept;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets in_statistic
     *
     * @return bool|null
     */
    public function getInStatistic()
    {
        return $this->container['in_statistic'];
    }

    /**
     * Sets in_statistic
     *
     * @param bool|null $in_statistic Show in statistics.
     *
     * @return self
     */
    public function setInStatistic($in_statistic)
    {
        $this->container['in_statistic'] = $in_statistic;

        return $this;
    }

    /**
     * Gets group_meeting
     *
     * @return \StevenBuehner\ChurchTools\Model\InlineResponse20017DataSettingsGroupMeeting|null
     */
    public function getGroupMeeting()
    {
        return $this->container['group_meeting'];
    }

    /**
     * Sets group_meeting
     *
     * @param \StevenBuehner\ChurchTools\Model\InlineResponse20017DataSettingsGroupMeeting|null $group_meeting group_meeting
     *
     * @return self
     */
    public function setGroupMeeting($group_meeting)
    {
        $this->container['group_meeting'] = $group_meeting;

        return $this;
    }

    /**
     * Gets inform_leader
     *
     * @return bool|null
     */
    public function getInformLeader()
    {
        return $this->container['inform_leader'];
    }

    /**
     * Sets inform_leader
     *
     * @param bool|null $inform_leader Inform leader via e-mail about changes.
     *
     * @return self
     */
    public function setInformLeader($inform_leader)
    {
        $this->container['inform_leader'] = $inform_leader;

        return $this;
    }

    /**
     * Gets new_member
     *
     * @return \StevenBuehner\ChurchTools\Model\InlineResponse20017DataSettingsNewMember|null
     */
    public function getNewMember()
    {
        return $this->container['new_member'];
    }

    /**
     * Sets new_member
     *
     * @param \StevenBuehner\ChurchTools\Model\InlineResponse20017DataSettingsNewMember|null $new_member new_member
     *
     * @return self
     */
    public function setNewMember($new_member)
    {
        $this->container['new_member'] = $new_member;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


