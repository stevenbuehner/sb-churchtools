<?php
/**
 * GetPublicgroup200ResponseDataSignUpConditions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StevenBuehner\ChurchTools\Model;

use \ArrayAccess;
use \StevenBuehner\ChurchTools\ObjectSerializer;

/**
 * GetPublicgroup200ResponseDataSignUpConditions Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetPublicgroup200ResponseDataSignUpConditions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getPublicgroup_200_response_data_signUpConditions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can_contact_leader' => 'bool',
        'default_role_set_in_group' => 'bool',
        'end_date_not_passed' => 'bool',
        'group_allows_waitinglist' => 'bool',
        'group_has_leader' => 'bool',
        'group_has_space_for_requests' => 'bool',
        'group_has_space_on_waitinglist' => 'bool',
        'group_is_active' => 'bool',
        'group_is_not_full' => 'bool',
        'group_is_not_hidden' => 'bool',
        'group_is_open_for_members' => 'bool',
        'group_is_public' => 'bool',
        'new_person_department_is_set' => 'bool',
        'new_person_station_is_set' => 'bool',
        'new_person_status_is_set' => 'bool',
        'requester_role_set_in_group' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can_contact_leader' => null,
        'default_role_set_in_group' => null,
        'end_date_not_passed' => null,
        'group_allows_waitinglist' => null,
        'group_has_leader' => null,
        'group_has_space_for_requests' => null,
        'group_has_space_on_waitinglist' => null,
        'group_is_active' => null,
        'group_is_not_full' => null,
        'group_is_not_hidden' => null,
        'group_is_open_for_members' => null,
        'group_is_public' => null,
        'new_person_department_is_set' => null,
        'new_person_station_is_set' => null,
        'new_person_status_is_set' => null,
        'requester_role_set_in_group' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_contact_leader' => 'canContactLeader',
        'default_role_set_in_group' => 'defaultRoleSetInGroup',
        'end_date_not_passed' => 'endDateNotPassed',
        'group_allows_waitinglist' => 'groupAllowsWaitinglist',
        'group_has_leader' => 'groupHasLeader',
        'group_has_space_for_requests' => 'groupHasSpaceForRequests',
        'group_has_space_on_waitinglist' => 'groupHasSpaceOnWaitinglist',
        'group_is_active' => 'groupIsActive',
        'group_is_not_full' => 'groupIsNotFull',
        'group_is_not_hidden' => 'groupIsNotHidden',
        'group_is_open_for_members' => 'groupIsOpenForMembers',
        'group_is_public' => 'groupIsPublic',
        'new_person_department_is_set' => 'newPersonDepartmentIsSet',
        'new_person_station_is_set' => 'newPersonStationIsSet',
        'new_person_status_is_set' => 'newPersonStatusIsSet',
        'requester_role_set_in_group' => 'requesterRoleSetInGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_contact_leader' => 'setCanContactLeader',
        'default_role_set_in_group' => 'setDefaultRoleSetInGroup',
        'end_date_not_passed' => 'setEndDateNotPassed',
        'group_allows_waitinglist' => 'setGroupAllowsWaitinglist',
        'group_has_leader' => 'setGroupHasLeader',
        'group_has_space_for_requests' => 'setGroupHasSpaceForRequests',
        'group_has_space_on_waitinglist' => 'setGroupHasSpaceOnWaitinglist',
        'group_is_active' => 'setGroupIsActive',
        'group_is_not_full' => 'setGroupIsNotFull',
        'group_is_not_hidden' => 'setGroupIsNotHidden',
        'group_is_open_for_members' => 'setGroupIsOpenForMembers',
        'group_is_public' => 'setGroupIsPublic',
        'new_person_department_is_set' => 'setNewPersonDepartmentIsSet',
        'new_person_station_is_set' => 'setNewPersonStationIsSet',
        'new_person_status_is_set' => 'setNewPersonStatusIsSet',
        'requester_role_set_in_group' => 'setRequesterRoleSetInGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_contact_leader' => 'getCanContactLeader',
        'default_role_set_in_group' => 'getDefaultRoleSetInGroup',
        'end_date_not_passed' => 'getEndDateNotPassed',
        'group_allows_waitinglist' => 'getGroupAllowsWaitinglist',
        'group_has_leader' => 'getGroupHasLeader',
        'group_has_space_for_requests' => 'getGroupHasSpaceForRequests',
        'group_has_space_on_waitinglist' => 'getGroupHasSpaceOnWaitinglist',
        'group_is_active' => 'getGroupIsActive',
        'group_is_not_full' => 'getGroupIsNotFull',
        'group_is_not_hidden' => 'getGroupIsNotHidden',
        'group_is_open_for_members' => 'getGroupIsOpenForMembers',
        'group_is_public' => 'getGroupIsPublic',
        'new_person_department_is_set' => 'getNewPersonDepartmentIsSet',
        'new_person_station_is_set' => 'getNewPersonStationIsSet',
        'new_person_status_is_set' => 'getNewPersonStatusIsSet',
        'requester_role_set_in_group' => 'getRequesterRoleSetInGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_contact_leader'] = $data['can_contact_leader'] ?? null;
        $this->container['default_role_set_in_group'] = $data['default_role_set_in_group'] ?? null;
        $this->container['end_date_not_passed'] = $data['end_date_not_passed'] ?? null;
        $this->container['group_allows_waitinglist'] = $data['group_allows_waitinglist'] ?? null;
        $this->container['group_has_leader'] = $data['group_has_leader'] ?? null;
        $this->container['group_has_space_for_requests'] = $data['group_has_space_for_requests'] ?? null;
        $this->container['group_has_space_on_waitinglist'] = $data['group_has_space_on_waitinglist'] ?? null;
        $this->container['group_is_active'] = $data['group_is_active'] ?? null;
        $this->container['group_is_not_full'] = $data['group_is_not_full'] ?? null;
        $this->container['group_is_not_hidden'] = $data['group_is_not_hidden'] ?? null;
        $this->container['group_is_open_for_members'] = $data['group_is_open_for_members'] ?? null;
        $this->container['group_is_public'] = $data['group_is_public'] ?? null;
        $this->container['new_person_department_is_set'] = $data['new_person_department_is_set'] ?? null;
        $this->container['new_person_station_is_set'] = $data['new_person_station_is_set'] ?? null;
        $this->container['new_person_status_is_set'] = $data['new_person_status_is_set'] ?? null;
        $this->container['requester_role_set_in_group'] = $data['requester_role_set_in_group'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_contact_leader
     *
     * @return bool|null
     */
    public function getCanContactLeader()
    {
        return $this->container['can_contact_leader'];
    }

    /**
     * Sets can_contact_leader
     *
     * @param bool|null $can_contact_leader can_contact_leader
     *
     * @return self
     */
    public function setCanContactLeader($can_contact_leader)
    {
        $this->container['can_contact_leader'] = $can_contact_leader;

        return $this;
    }

    /**
     * Gets default_role_set_in_group
     *
     * @return bool|null
     */
    public function getDefaultRoleSetInGroup()
    {
        return $this->container['default_role_set_in_group'];
    }

    /**
     * Sets default_role_set_in_group
     *
     * @param bool|null $default_role_set_in_group default_role_set_in_group
     *
     * @return self
     */
    public function setDefaultRoleSetInGroup($default_role_set_in_group)
    {
        $this->container['default_role_set_in_group'] = $default_role_set_in_group;

        return $this;
    }

    /**
     * Gets end_date_not_passed
     *
     * @return bool|null
     */
    public function getEndDateNotPassed()
    {
        return $this->container['end_date_not_passed'];
    }

    /**
     * Sets end_date_not_passed
     *
     * @param bool|null $end_date_not_passed end_date_not_passed
     *
     * @return self
     */
    public function setEndDateNotPassed($end_date_not_passed)
    {
        $this->container['end_date_not_passed'] = $end_date_not_passed;

        return $this;
    }

    /**
     * Gets group_allows_waitinglist
     *
     * @return bool|null
     */
    public function getGroupAllowsWaitinglist()
    {
        return $this->container['group_allows_waitinglist'];
    }

    /**
     * Sets group_allows_waitinglist
     *
     * @param bool|null $group_allows_waitinglist group_allows_waitinglist
     *
     * @return self
     */
    public function setGroupAllowsWaitinglist($group_allows_waitinglist)
    {
        $this->container['group_allows_waitinglist'] = $group_allows_waitinglist;

        return $this;
    }

    /**
     * Gets group_has_leader
     *
     * @return bool|null
     */
    public function getGroupHasLeader()
    {
        return $this->container['group_has_leader'];
    }

    /**
     * Sets group_has_leader
     *
     * @param bool|null $group_has_leader group_has_leader
     *
     * @return self
     */
    public function setGroupHasLeader($group_has_leader)
    {
        $this->container['group_has_leader'] = $group_has_leader;

        return $this;
    }

    /**
     * Gets group_has_space_for_requests
     *
     * @return bool|null
     */
    public function getGroupHasSpaceForRequests()
    {
        return $this->container['group_has_space_for_requests'];
    }

    /**
     * Sets group_has_space_for_requests
     *
     * @param bool|null $group_has_space_for_requests group_has_space_for_requests
     *
     * @return self
     */
    public function setGroupHasSpaceForRequests($group_has_space_for_requests)
    {
        $this->container['group_has_space_for_requests'] = $group_has_space_for_requests;

        return $this;
    }

    /**
     * Gets group_has_space_on_waitinglist
     *
     * @return bool|null
     */
    public function getGroupHasSpaceOnWaitinglist()
    {
        return $this->container['group_has_space_on_waitinglist'];
    }

    /**
     * Sets group_has_space_on_waitinglist
     *
     * @param bool|null $group_has_space_on_waitinglist group_has_space_on_waitinglist
     *
     * @return self
     */
    public function setGroupHasSpaceOnWaitinglist($group_has_space_on_waitinglist)
    {
        $this->container['group_has_space_on_waitinglist'] = $group_has_space_on_waitinglist;

        return $this;
    }

    /**
     * Gets group_is_active
     *
     * @return bool|null
     */
    public function getGroupIsActive()
    {
        return $this->container['group_is_active'];
    }

    /**
     * Sets group_is_active
     *
     * @param bool|null $group_is_active group_is_active
     *
     * @return self
     */
    public function setGroupIsActive($group_is_active)
    {
        $this->container['group_is_active'] = $group_is_active;

        return $this;
    }

    /**
     * Gets group_is_not_full
     *
     * @return bool|null
     */
    public function getGroupIsNotFull()
    {
        return $this->container['group_is_not_full'];
    }

    /**
     * Sets group_is_not_full
     *
     * @param bool|null $group_is_not_full group_is_not_full
     *
     * @return self
     */
    public function setGroupIsNotFull($group_is_not_full)
    {
        $this->container['group_is_not_full'] = $group_is_not_full;

        return $this;
    }

    /**
     * Gets group_is_not_hidden
     *
     * @return bool|null
     */
    public function getGroupIsNotHidden()
    {
        return $this->container['group_is_not_hidden'];
    }

    /**
     * Sets group_is_not_hidden
     *
     * @param bool|null $group_is_not_hidden group_is_not_hidden
     *
     * @return self
     */
    public function setGroupIsNotHidden($group_is_not_hidden)
    {
        $this->container['group_is_not_hidden'] = $group_is_not_hidden;

        return $this;
    }

    /**
     * Gets group_is_open_for_members
     *
     * @return bool|null
     */
    public function getGroupIsOpenForMembers()
    {
        return $this->container['group_is_open_for_members'];
    }

    /**
     * Sets group_is_open_for_members
     *
     * @param bool|null $group_is_open_for_members group_is_open_for_members
     *
     * @return self
     */
    public function setGroupIsOpenForMembers($group_is_open_for_members)
    {
        $this->container['group_is_open_for_members'] = $group_is_open_for_members;

        return $this;
    }

    /**
     * Gets group_is_public
     *
     * @return bool|null
     */
    public function getGroupIsPublic()
    {
        return $this->container['group_is_public'];
    }

    /**
     * Sets group_is_public
     *
     * @param bool|null $group_is_public group_is_public
     *
     * @return self
     */
    public function setGroupIsPublic($group_is_public)
    {
        $this->container['group_is_public'] = $group_is_public;

        return $this;
    }

    /**
     * Gets new_person_department_is_set
     *
     * @return bool|null
     */
    public function getNewPersonDepartmentIsSet()
    {
        return $this->container['new_person_department_is_set'];
    }

    /**
     * Sets new_person_department_is_set
     *
     * @param bool|null $new_person_department_is_set new_person_department_is_set
     *
     * @return self
     */
    public function setNewPersonDepartmentIsSet($new_person_department_is_set)
    {
        $this->container['new_person_department_is_set'] = $new_person_department_is_set;

        return $this;
    }

    /**
     * Gets new_person_station_is_set
     *
     * @return bool|null
     */
    public function getNewPersonStationIsSet()
    {
        return $this->container['new_person_station_is_set'];
    }

    /**
     * Sets new_person_station_is_set
     *
     * @param bool|null $new_person_station_is_set new_person_station_is_set
     *
     * @return self
     */
    public function setNewPersonStationIsSet($new_person_station_is_set)
    {
        $this->container['new_person_station_is_set'] = $new_person_station_is_set;

        return $this;
    }

    /**
     * Gets new_person_status_is_set
     *
     * @return bool|null
     */
    public function getNewPersonStatusIsSet()
    {
        return $this->container['new_person_status_is_set'];
    }

    /**
     * Sets new_person_status_is_set
     *
     * @param bool|null $new_person_status_is_set new_person_status_is_set
     *
     * @return self
     */
    public function setNewPersonStatusIsSet($new_person_status_is_set)
    {
        $this->container['new_person_status_is_set'] = $new_person_status_is_set;

        return $this;
    }

    /**
     * Gets requester_role_set_in_group
     *
     * @return bool|null
     */
    public function getRequesterRoleSetInGroup()
    {
        return $this->container['requester_role_set_in_group'];
    }

    /**
     * Sets requester_role_set_in_group
     *
     * @param bool|null $requester_role_set_in_group requester_role_set_in_group
     *
     * @return self
     */
    public function setRequesterRoleSetInGroup($requester_role_set_in_group)
    {
        $this->container['requester_role_set_in_group'] = $requester_role_set_in_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


