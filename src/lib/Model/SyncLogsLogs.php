<?php
/**
 * SyncLogsLogs
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChurchTools REST API
 *
 * The ChurchTools REST API is the best entry point for developers to access ChurchTools. <br><br> **Authentication:** You need to be authorized to use some endpoints. Those endpoints are marked by a gray lock symbol. If you view the documentation, while you are logged into ChurchTools, all requests are already authorized. If you want to authorized a request, you need to provide a `Login Token` as `Authorization` header in the format `Authorization: Login<token>` or send a valid cookie. You can use the green \"Authorize\" dialog to enter those details and see how a request would look like in detail. <br><br> **Missing Endpoints:** Not all features are yet available by our new REST API. This documentation will grow in the future. We are working hard to add new endpoints with every ChurchTools version. The documentation will always show only those endpoints you can use with your ChurchTools installation.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StevenBuehner\ChurchTools\Model;

use \ArrayAccess;
use \StevenBuehner\ChurchTools\ObjectSerializer;

/**
 * SyncLogsLogs Class Doc Comment
 *
 * @category Class
 * @package  StevenBuehner\ChurchTools
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SyncLogsLogs implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_sync_logs_logs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date' => '\DateTime',
        'job_id' => 'float',
        'system' => 'string',
        'level' => 'string',
        'is_dry_run' => 'bool',
        'type' => 'string',
        'message_key' => 'string',
        'args' => 'object',
        'domain_type' => 'mixed',
        'domain_id' => 'mixed',
        'source_entity_id' => 'mixed',
        'changes' => '\StevenBuehner\ChurchTools\Model\SyncLogsChanges[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date' => 'date-time',
        'job_id' => null,
        'system' => null,
        'level' => null,
        'is_dry_run' => null,
        'type' => null,
        'message_key' => null,
        'args' => null,
        'domain_type' => null,
        'domain_id' => null,
        'source_entity_id' => null,
        'changes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'job_id' => 'jobId',
        'system' => 'system',
        'level' => 'level',
        'is_dry_run' => 'isDryRun',
        'type' => 'type',
        'message_key' => 'messageKey',
        'args' => 'args',
        'domain_type' => 'domainType',
        'domain_id' => 'domainId',
        'source_entity_id' => 'sourceEntityId',
        'changes' => 'changes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'job_id' => 'setJobId',
        'system' => 'setSystem',
        'level' => 'setLevel',
        'is_dry_run' => 'setIsDryRun',
        'type' => 'setType',
        'message_key' => 'setMessageKey',
        'args' => 'setArgs',
        'domain_type' => 'setDomainType',
        'domain_id' => 'setDomainId',
        'source_entity_id' => 'setSourceEntityId',
        'changes' => 'setChanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'job_id' => 'getJobId',
        'system' => 'getSystem',
        'level' => 'getLevel',
        'is_dry_run' => 'getIsDryRun',
        'type' => 'getType',
        'message_key' => 'getMessageKey',
        'args' => 'getArgs',
        'domain_type' => 'getDomainType',
        'domain_id' => 'getDomainId',
        'source_entity_id' => 'getSourceEntityId',
        'changes' => 'getChanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SYSTEM_ES = 'es';
    const SYSTEM_MASTER = 'master';
    const SYSTEM_BOTH = 'both';
    const LEVEL_DEBUG = 'debug';
    const LEVEL_INFO = 'info';
    const LEVEL_NOTICE = 'notice';
    const LEVEL_WARNING = 'warning';
    const LEVEL_ERROR = 'error';
    const LEVEL_CRITICAL = 'critical';
    const LEVEL_ALERT = 'alert';
    const LEVEL_EMERGENCY = 'emergency';
    const TYPE_CREATE = 'create';
    const TYPE_UPDATE = 'update';
    const TYPE_LINK = 'link';
    const TYPE_DELETE = 'delete';
    const TYPE_EXECUTION = 'execution';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSystemAllowableValues()
    {
        return [
            self::SYSTEM_ES,
            self::SYSTEM_MASTER,
            self::SYSTEM_BOTH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLevelAllowableValues()
    {
        return [
            self::LEVEL_DEBUG,
            self::LEVEL_INFO,
            self::LEVEL_NOTICE,
            self::LEVEL_WARNING,
            self::LEVEL_ERROR,
            self::LEVEL_CRITICAL,
            self::LEVEL_ALERT,
            self::LEVEL_EMERGENCY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CREATE,
            self::TYPE_UPDATE,
            self::TYPE_LINK,
            self::TYPE_DELETE,
            self::TYPE_EXECUTION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = $data['date'] ?? null;
        $this->container['job_id'] = $data['job_id'] ?? null;
        $this->container['system'] = $data['system'] ?? null;
        $this->container['level'] = $data['level'] ?? null;
        $this->container['is_dry_run'] = $data['is_dry_run'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['message_key'] = $data['message_key'] ?? null;
        $this->container['args'] = $data['args'] ?? null;
        $this->container['domain_type'] = $data['domain_type'] ?? null;
        $this->container['domain_id'] = $data['domain_id'] ?? null;
        $this->container['source_entity_id'] = $data['source_entity_id'] ?? null;
        $this->container['changes'] = $data['changes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ((mb_strlen($this->container['date']) < 1)) {
            $invalidProperties[] = "invalid value for 'date', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['job_id'] === null) {
            $invalidProperties[] = "'job_id' can't be null";
        }
        if ($this->container['system'] === null) {
            $invalidProperties[] = "'system' can't be null";
        }
        $allowedValues = $this->getSystemAllowableValues();
        if (!is_null($this->container['system']) && !in_array($this->container['system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'system', must be one of '%s'",
                $this->container['system'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['system']) < 1)) {
            $invalidProperties[] = "invalid value for 'system', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['level'] === null) {
            $invalidProperties[] = "'level' can't be null";
        }
        $allowedValues = $this->getLevelAllowableValues();
        if (!is_null($this->container['level']) && !in_array($this->container['level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'level', must be one of '%s'",
                $this->container['level'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['level']) < 1)) {
            $invalidProperties[] = "invalid value for 'level', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['is_dry_run'] === null) {
            $invalidProperties[] = "'is_dry_run' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ((mb_strlen($this->container['type']) < 1)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['message_key'] === null) {
            $invalidProperties[] = "'message_key' can't be null";
        }
        if ((mb_strlen($this->container['message_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'message_key', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['args'] === null) {
            $invalidProperties[] = "'args' can't be null";
        }
        if ($this->container['domain_type'] === null) {
            $invalidProperties[] = "'domain_type' can't be null";
        }
        if ((mb_strlen($this->container['domain_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'domain_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['domain_id'] === null) {
            $invalidProperties[] = "'domain_id' can't be null";
        }
        if ((mb_strlen($this->container['domain_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'domain_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['source_entity_id'] === null) {
            $invalidProperties[] = "'source_entity_id' can't be null";
        }
        if ((mb_strlen($this->container['source_entity_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'source_entity_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return self
     */
    public function setDate($date)
    {

        if ((mb_strlen($date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $date when calling SyncLogsLogs., must be bigger than or equal to 1.');
        }

        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return float
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param float $job_id job_id
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets system
     *
     * @return string
     */
    public function getSystem()
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     *
     * @param string $system system
     *
     * @return self
     */
    public function setSystem($system)
    {
        $allowedValues = $this->getSystemAllowableValues();
        if (!in_array($system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'system', must be one of '%s'",
                    $system,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($system) < 1)) {
            throw new \InvalidArgumentException('invalid length for $system when calling SyncLogsLogs., must be bigger than or equal to 1.');
        }

        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level level
     *
     * @return self
     */
    public function setLevel($level)
    {
        $allowedValues = $this->getLevelAllowableValues();
        if (!in_array($level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'level', must be one of '%s'",
                    $level,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($level) < 1)) {
            throw new \InvalidArgumentException('invalid length for $level when calling SyncLogsLogs., must be bigger than or equal to 1.');
        }

        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets is_dry_run
     *
     * @return bool
     */
    public function getIsDryRun()
    {
        return $this->container['is_dry_run'];
    }

    /**
     * Sets is_dry_run
     *
     * @param bool $is_dry_run is_dry_run
     *
     * @return self
     */
    public function setIsDryRun($is_dry_run)
    {
        $this->container['is_dry_run'] = $is_dry_run;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ((mb_strlen($type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $type when calling SyncLogsLogs., must be bigger than or equal to 1.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets message_key
     *
     * @return string
     */
    public function getMessageKey()
    {
        return $this->container['message_key'];
    }

    /**
     * Sets message_key
     *
     * @param string $message_key Translation Key
     *
     * @return self
     */
    public function setMessageKey($message_key)
    {

        if ((mb_strlen($message_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $message_key when calling SyncLogsLogs., must be bigger than or equal to 1.');
        }

        $this->container['message_key'] = $message_key;

        return $this;
    }

    /**
     * Gets args
     *
     * @return object
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param object $args Arguments for Translation Key
     *
     * @return self
     */
    public function setArgs($args)
    {
        $this->container['args'] = $args;

        return $this;
    }

    /**
     * Gets domain_type
     *
     * @return mixed
     */
    public function getDomainType()
    {
        return $this->container['domain_type'];
    }

    /**
     * Sets domain_type
     *
     * @param mixed $domain_type domain_type
     *
     * @return self
     */
    public function setDomainType($domain_type)
    {

        if ((mb_strlen($domain_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $domain_type when calling SyncLogsLogs., must be bigger than or equal to 1.');
        }

        $this->container['domain_type'] = $domain_type;

        return $this;
    }

    /**
     * Gets domain_id
     *
     * @return mixed
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     *
     * @param mixed $domain_id domain_id
     *
     * @return self
     */
    public function setDomainId($domain_id)
    {

        if ((mb_strlen($domain_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $domain_id when calling SyncLogsLogs., must be bigger than or equal to 1.');
        }

        $this->container['domain_id'] = $domain_id;

        return $this;
    }

    /**
     * Gets source_entity_id
     *
     * @return mixed
     */
    public function getSourceEntityId()
    {
        return $this->container['source_entity_id'];
    }

    /**
     * Sets source_entity_id
     *
     * @param mixed $source_entity_id source_entity_id
     *
     * @return self
     */
    public function setSourceEntityId($source_entity_id)
    {

        if ((mb_strlen($source_entity_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $source_entity_id when calling SyncLogsLogs., must be bigger than or equal to 1.');
        }

        $this->container['source_entity_id'] = $source_entity_id;

        return $this;
    }

    /**
     * Gets changes
     *
     * @return \StevenBuehner\ChurchTools\Model\SyncLogsChanges[]|null
     */
    public function getChanges()
    {
        return $this->container['changes'];
    }

    /**
     * Sets changes
     *
     * @param \StevenBuehner\ChurchTools\Model\SyncLogsChanges[]|null $changes changes
     *
     * @return self
     */
    public function setChanges($changes)
    {
        $this->container['changes'] = $changes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


